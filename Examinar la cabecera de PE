Examinar la cabecera de PE (Portable executable)

    Los archivos ejecutables portátiles (EP) son un tipo de archivo común de Windows. Los archivos PE incluyen los archivos .exe, .dll y .sys. Todos los archivos PE se distinguen por tener una cabecera PE, que es una sección de cabecera del código que indica a Windows cómo analizar el código posterior. Los campos de la cabecera PE se utilizan a menudo como características en la detección de programa maligno. Para extraer fácilmente la multitud de valores de la cabecera PE, utilizaremos el módulo de Python3 pefile. En esta práctica, analizaremos la cabecera PE de un archivo y luego imprimiremos partes notables del mismo.

Preparación
    La preparación para esta receta consiste en instalar el paquete pefile en pip. En un terminal de su entorno Python, ejecute lo siguiente:
    pip3 install pefile

Cómo hacerlo
    En los siguientes pasos, analizaremos la cabecera PE de un archivo VLC, y luego imprimiremos partes notables del mismo: 
    https://get.videolan.org/vlc/3.0.17.4/win32/vlc-3.0.17.4-win32.exe

1. Importe el archivo PE y utilícelo para analizar la cabecera PE del archivo deseado:

    import pefile
    desired_file = "vlc-3.0.17.4-win32.exe"
    ep = pefile.EP(desired_file)

2. Enumerar las importaciones del archivo PE:

    for entry in pe.DIRECTORY_ENTRY_IMPORT:
        print(entry.dll)
        for imp in entry.imports:
            print("\t", hex(imp.address), imp.name)

3. Enumerar las secciones del archivo EP:	

    for section in ep.sections:
        print(
            section.Name,
            hex(section.VirtualAddress),
            hex(section.Misc_VirtualSize),
            section.SizeOfRawData,
        )
        
4. Imprime un volcado completo de la información analizada:

    print(ep.dump_info())

Cómo funciona.

En el paso 1 importar la librería pefile y especificar qué archivo vamos a analizar en este caso VLC. El archivo era vlc-3.0.17.4-win32.exe, aclaración es igual de 
fácil analizar cualquier otro archivo EP. después examinar las DLL que importa el archivo, para entender qué métodos puede estar utilizando el archivo 

En el paso 2. Las DLLs responden a esta solicitud porque una DLL es una biblioteca de código a la que otras aplicaciones pueden llamar. Por ejemplo, USER32.dll 
es una biblioteca que contiene Windows USER, un componente del sistema operativo Microsoft Windows que proporciona una funcionalidad básica para la construcción 
de interfaces de usuario. El componente permite que otras aplicaciones aprovechen esta funcionalidad para la gestión de ventanas, el paso de mensajes, el procesamiento 
de entradas y los controles estándar. Lógicamente entonces, si vemos que un archivo está importando un método como GetCursorPos, entonces esta función sirve para 
determinar la posición actual del cursor. 

En el paso 3, imprimimos las secciones del archivo PE. Estas proporcionan una separación lógica y física a las diferentes partes de un programa, y por lo tanto 
ofrecen al analista de seguridad una información valiosa sobre el programa. 

Por último, en el paso 4, imprimimos toda la información parseada de la cabecera del archivo EP analizada para prepararla para su posterior utilización en la 
caracterización. 


